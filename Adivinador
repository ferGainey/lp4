import java.util.Scanner;


public class Adivinador {

	private String nombreJugador;
	private int[] numeroClave = new int[4];
	private int numeroEnMismaPosicion;
	private int numeroEnDistintaPosicion;
	
	public Adivinador(String nombre) {
		this.nombreJugador = nombre;
		for (int i = 0; i<this.numeroClave.length; i++){
			this.numeroClave[i] = -1;
		}
		this.numeroEnDistintaPosicion=0;
		this.numeroEnMismaPosicion=0;
	}
	
	public static void main(String [] pps) throws MiExcepcion{
		
		Scanner miScan= new Scanner(System.in);
		System.out.println("Ingrese su nombre:");
		String miNombre = miScan.next();
		Adivinador miAdivinador = new Adivinador(miNombre);
		int[] unVector = new int[4];
		int[] otroVector= new int[4];
		unVector = inicializarVector(unVector);
		otroVector = inicializarVector(otroVector);
		
		System.out.println("Ingrese 4 numeros sin repetir entre el 0 y el 9 para adivinar");
		int aux=-1;
		
		ingresarNumeros(aux, unVector, miScan);
		
		miAdivinador.setNumeroClave(unVector);
		
		System.out.println("\n Comienza el juego \n");
		System.out.println("Ingrese 4 numeros sin repetir entre el 0 y el 9");

		int contador=1;
		while(miAdivinador.getNumerosMismaPosicion()<4){
			System.out.println("intento nro: "+ contador);
			ingresarNumeros(aux, otroVector, miScan);
			miAdivinador.jugar(otroVector);
			contador++;
		}
		
		
	}

	/** pre: el numero a ingresar debe estar en [0,9] y sin repetir valores
	 *  post: permite settear los numeros para jugar**/
	private static void ingresarNumeros(int aux, int[] unVector, Scanner miScan) {
		for(int i=0; i<unVector.length; i++){
			
			aux = miScan.nextInt();
			while(!verificarNro(aux)){
				System.out.println("El numero ha ingresar debe estar en [0,9]");
				aux = miScan.nextInt();
				
			}
			
			while(controlDeIngreso(aux, unVector) || !verificarNro(aux)){
				System.out.println("El numero ingresado no debe ser repetido y estar en [0,9]");
				aux = miScan.nextInt();
								
			}
			
			unVector[i]= aux;	
		}
		
	}

	private static int[] inicializarVector(int[] unVector) {
		for(int i=0; i<unVector.length; i++){
			unVector[i]=-1;
		}
		return unVector;
	}

	public static boolean controlDeIngreso(int unNumero, int [] unVector){
		boolean control= false;
		int n = unVector.length-1;
		for (int longitud = n; longitud > 0; longitud--){
			if (unNumero == unVector[longitud-1]) {
				System.out.println("no verifica precondición");
				control=true;
			
			}
		}
		return control;
	}

	/** post: retorna verdadero si el numero está comprendido entre el 0 y 9 **/
	public static boolean verificarNro(int unNumero){
		boolean verificacion= false;
		if(unNumero>=0 && unNumero<=9){
			verificacion= true;
		}
		return verificacion;
	}
	
	/** metodo creado para poder realizar los test **/
	public boolean controlDeNumeros1(int aux, int [] unVector) {
		boolean control= false;
		int n = unVector.length-1;
		for (int longitud = n; longitud > 0; longitud--){
			if (aux == unVector[longitud-1]) {
				System.out.println("no verifica precondición");
				control=true;
			
			}
		}
		return control;
	}
	
	public void setNumeroClave(int[] numeroClave) {
		this.numeroClave = numeroClave;
	}

	
	/** post: dado otra secuencia de numeros retorna
	 * cuantos numeros hay en la misma y/o distinta posicion
	 *  
	 * @param otroNumero
	 */
	public void jugar(int[] otroNumero) {
		this.numeroEnDistintaPosicion=0;
		this.numeroEnMismaPosicion=0;
		if(comparacionLineal(otroNumero)){
			System.out.println("Felicitaciones "+this.nombreJugador+" ha ganado.");
			System.out.println("Números en la misma posición: "+this.numeroEnMismaPosicion);
			return;
		}else{
			comparacionPorAtributo(otroNumero);
			System.out.println("Números en la misma posición: "+this.numeroEnMismaPosicion);
			System.out.println("Números en distinta posición: "+this.numeroEnDistintaPosicion);
		}
		
	}

	private void comparacionPorAtributo(int[] otroNumero) {
		int comienzoRecorrido = this.numeroEnMismaPosicion;
		
		if(comienzoRecorrido!=0){
			recorrerDesde(comienzoRecorrido,otroNumero);
		}else{
			recorrerDesde(comienzoRecorrido,otroNumero);
		}		
	}

	private void recorrerDesde(int comienzoRecorrido, int[] otroNumero) {
		for(int i = comienzoRecorrido; i<otroNumero.length;i++){
			for(int j = 0; j<this.numeroClave.length; j++){
				if(otroNumero[i]==this.numeroClave[j] && i!=j){
					this.numeroEnDistintaPosicion++;
				}
			}
		}
	}

	private boolean comparacionLineal(int[] otroNumero) {
		boolean estado = true;
		
		for(int i =0; (estado)&&(i<this.numeroClave.length); i++){
			if(this.numeroClave[i]!=otroNumero[i]){
				estado = false;
			}else{				
				this.numeroEnMismaPosicion++;
			}
		}
		
		return estado;
	}

	public int getNumerosMismaPosicion() {
		return this.numeroEnMismaPosicion;
	}
	
	public String getNombre(){
		return this.nombreJugador;
	}

	public int getNumerosDistintaPosicion() {
		return this.numeroEnDistintaPosicion;
	}
	
}
